{"version":3,"file":"static/js/631.3297c232.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.js","utils/service-api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { IoMdArrowBack } from 'react-icons/io';\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  height: 450px;\n  padding: 16px;\n  border-bottom: 1px gray solid;\n`;\n\nexport const MovieDescr = styled.div`\n  text-align: start;\n  padding: 0 15px;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  text-align: start;\n  text-decoration: none;\n  color: black;\n\n  &.active {\n    color: orangered;\n  }\n`;\n\nexport const StyledArrowIcon = styled(IoMdArrowBack)`\n  display: flex;\n  align-items: baseline;\n  justify-content: left;\n  margin-left: 15px;\n  padding: 5px;\n  font-size: 20px;\n\n  :hover {\n    color: orangered;\n  }\n`;\n\nexport const Stars = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 15px;\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 115px;\n  height: 45px;\n  padding: 13px;\n  color: black;\n  text-transform: uppercase;\n  font-style: normal;\n  line-height: 1.33;\n  border: 1px solid black;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const AddToMyListBtn = styled(Button)`\n  background-color: rgba(255, 255, 255, 1);\n\n  &:hover {\n    color: rgba(255, 255, 255, 1);\n    background-color: #ff6b08;\n  }\n`;\n\nexport const RemoveFromMyListBtn = styled(Button)`\n  border-color: #ff6b08;\n  color: rgba(255, 255, 255, 1);\n  background-color: #ff6b08;\n\n  &:hover {\n    border-color: black;\n  }\n`;\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport { useParams, Outlet, Link, useLocation } from 'react-router-dom';\nimport { getMovieDetails } from 'utils/service-api';\nimport Loader from 'components/Skeleton/Skeleton';\nimport { toast } from 'react-toastify';\nimport { IconContext } from 'react-icons';\nimport { AiFillStar } from 'react-icons/ai';\nimport {\n  MovieInfo,\n  MovieDescr,\n  StyledNavLink,\n  StyledArrowIcon,\n  Stars,\n  AddToMyListBtn,\n  RemoveFromMyListBtn,\n} from './MovieDetails.styled';\nimport defaultPoster from '../../components/defaultImages/default-movie.jpg';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [favourites, setFavourites] = useState(\n    () => JSON.parse(localStorage.getItem('favourites')) ?? []\n  );\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieDetails(id)\n      .then(setMovie)\n      .catch(error => console.log(error))\n      .finally(() => setIsLoading(false));\n  }, [id]);\n\n  useEffect(() => {\n    localStorage.setItem('favourites', JSON.stringify(favourites));\n  }, [favourites]);\n\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  const addMovieToMyList = movie => {\n    if (favourites.some(favourite => favourite.id === movie.id)) {\n      setFavourites(prevState => prevState.filter(({ id }) => id !== movie.id));\n      toast.success(\n        <p>\n          Movie <span style={{ color: 'green' }}>{movie.title}</span> removed\n          from My List!\n        </p>\n      );\n      return;\n    }\n    setFavourites(prevState => [\n      ...prevState.filter(({ id }) => id !== movie.id),\n      movie,\n    ]);\n    toast.success(\n      <p>\n        Movie <span style={{ color: 'green' }}>{movie.title}</span> added to My\n        List!\n      </p>\n    );\n  };\n\n  return (\n    <>\n      {isLoading && <Loader page={`/movies/${id}`} />}\n      {movie && (\n        <>\n          <Link to={backLinkLocationRef.current}>\n            <StyledArrowIcon />\n          </Link>\n          <MovieInfo>\n            <img\n              src={\n                movie.poster_path\n                  ? `https://image.tmdb.org/t/p/original${movie.poster_path}`\n                  : defaultPoster\n              }\n              alt={movie.title}\n              width=\"300\"\n              height=\"450\"\n              loading=\"lazy\"\n              style={{ backgroundColor: '#ebebeb' }}\n            />\n            <MovieDescr>\n              <h2>\n                {movie.title}{' '}\n                <span style={{ fontWeight: 400 }}>\n                  (\n                  {movie.release_date\n                    ? movie.release_date.slice(0, 4)\n                    : 'No date'}\n                  )\n                </span>\n              </h2>\n              <h3>\n                User Score:{' '}\n                <span style={{ fontWeight: 400 }}>\n                  {movie.vote_average\n                    ? movie.vote_average.toFixed(1) * 10 + '%'\n                    : 'This movie does not have user score.'}\n                </span>\n                {movie.vote_average ? (\n                  <Stars>\n                    {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((el, index) => (\n                      <IconContext.Provider\n                        key={index}\n                        value={{\n                          size: 40,\n                          color: `${\n                            index >= Math.floor(movie.vote_average.toFixed(0))\n                              ? '#ccc'\n                              : 'orange'\n                          }`,\n                        }}\n                      >\n                        <AiFillStar />\n                      </IconContext.Provider>\n                    ))}\n                  </Stars>\n                ) : null}\n              </h3>\n              <h3>Overview: </h3>\n              <p>{movie.overview ? movie.overview : 'No movie description'}</p>\n              <h3>\n                Genres:{' '}\n                <span style={{ fontWeight: 400 }}>\n                  {movie.genres.length\n                    ? movie.genres.map(({ name }) => [name]).join(', ')\n                    : 'No genre'}\n                </span>\n              </h3>\n              {!favourites.some(fav => movie.id === fav.id) ? (\n                <AddToMyListBtn onClick={() => addMovieToMyList(movie)}>\n                  Add to My List\n                </AddToMyListBtn>\n              ) : (\n                <RemoveFromMyListBtn onClick={() => addMovieToMyList(movie)}>\n                  Remove from My List\n                </RemoveFromMyListBtn>\n              )}\n            </MovieDescr>\n          </MovieInfo>\n          <h2>Additional information</h2>\n          <ul\n            style={{\n              display: 'flex',\n              gap: '10px',\n              textAlign: 'start',\n              listStyle: 'none',\n            }}\n          >\n            <li>\n              <StyledNavLink to=\"cast\">Cast</StyledNavLink>\n            </li>\n            <li>\n              <StyledNavLink to=\"reviews\">Reviews</StyledNavLink>\n            </li>\n          </ul>\n          <Suspense fallback={<Loader page={location.pathname} />}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY = '53262c5d6ff8109487cc66546be6258b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nlet cachedMovies = [];\nlet searchedMovies = [];\n\nexport const getTrendingMovies = async (page = 1) => {\n  /*   if (page === 1) {\n   */ cachedMovies = [];\n  /* } */\n\n  const { data } = await axios(`${BASE_URL}/trending/movie/day`, {\n    params: {\n      api_key: KEY,\n      page,\n    },\n  });\n\n  const uniqueMovies = data.results.filter(movie => {\n    if (cachedMovies.some(cachedMovie => cachedMovie.id === movie.id)) {\n      return false;\n    } else {\n      cachedMovies.push(movie);\n      return true;\n    }\n  });\n  data.results = uniqueMovies;\n  return data;\n};\n\nexport const searchMovie = async (query, page) => {\n  if (page === 1) {\n    searchedMovies = [];\n  }\n  const { data } = await axios(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: KEY,\n      query,\n      page,\n    },\n  });\n\n  const uniqueMovies = data.results.filter(movie => {\n    if (searchedMovies.some(searchedMovie => searchedMovie.id === movie.id)) {\n      return false;\n    } else {\n      searchedMovies.push(movie);\n      return true;\n    }\n  });\n  data.results = uniqueMovies;\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios(`${BASE_URL}/movie/${movieId}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return data;\n};\n\nexport const getCast = async movieId => {\n  const { data } = await axios(`${BASE_URL}/movie/${movieId}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const { data } = await axios(`${BASE_URL}/movie/${movieId}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return data.results;\n};\n"],"names":["MovieInfo","styled","MovieDescr","StyledNavLink","NavLink","StyledArrowIcon","IoMdArrowBack","Stars","Button","AddToMyListBtn","RemoveFromMyListBtn","id","useParams","useState","movie","setMovie","isLoading","setIsLoading","JSON","parse","localStorage","getItem","favourites","setFavourites","useEffect","getMovieDetails","then","catch","error","console","log","finally","setItem","stringify","location","useLocation","backLinkLocationRef","useRef","state","from","addMovieToMyList","some","favourite","prevState","filter","toast","style","color","title","page","to","current","src","poster_path","defaultPoster","alt","width","height","loading","backgroundColor","fontWeight","release_date","slice","vote_average","toFixed","map","el","index","value","size","Math","floor","overview","genres","length","name","join","fav","onClick","display","gap","textAlign","listStyle","Suspense","fallback","pathname","KEY","BASE_URL","cachedMovies","searchedMovies","getTrendingMovies","axios","params","api_key","data","uniqueMovies","results","cachedMovie","push","searchMovie","query","searchedMovie","movieId","getCast","cast","getReviews"],"sourceRoot":""}